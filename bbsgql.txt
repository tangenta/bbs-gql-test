# 注册登录
+@query currentUser: CurrentUserResult!
@mutation signup(signup: SignupInput!): SignupResult!
@mutation login(loginInput: LoginInput!): LoginResult!
+@mutation logout: LogoutResult!

input SignupInput {
    username: String!
    password: String!
    nickname: String!
}

input LoginInput {
    username: String!
    password: String!
}

type LoggedInToken {
    token: String!
}

union CurrentUserResult = Error | PersonalInfo
union SignupResult = Error | LoggedInToken
union LoginResult = Error | LoggedInToken
union LogoutResult = Error | Ok



# 最热讨论
@query hots: HotsResult! # 依赖于日期，每日更新，缓存

union HotsResult = Error | Hots
type Hots {
    hots: [HotItem!]!
}
union HotItem = SchoolHeatInfo | EntertainmentInfo | LearningResourceInfo


# 最新动态
@query latests: LatestsResult! # 时刻不同，考虑按窗口缓存

union LatestsResult = Error | Latests
type Latests {
    latests: [LatestItem!]!
}
union LatestItem = SchoolHeatInfo | EntertainmentInfo | LearningResourceInfo



# 今日头条
@query news: MultiNewsInfos! # 依赖于日子，每日/周/月更新，缓存
@query newsInfo(newsId: String!): NewsInfoResult!
+@mutation createNews(newsInput: NewsInput!): CreateNewsResult!
+@mutation deleteNews(newsId: String!): DeleteNewsResult!
+@mutation editNews(newsId: String!, newsInput: NewsInput!): EditNewsResult!

type MultiNewsInfos {
    newss: [NewsInfo!]!
}
type NewsInfo {
    id: ID!
    title: String!
    content: Content!
    postTime: Long!
    editTime: Long!
    pictureURL: String!
}
input NewsInput {
    title: String
    content: ContentInput
    pictureBase64: String
}
union NewsInfoResult   = Error | NewsInfo
union CreateNewsResult = Error | NewsInfo
union DeleteNewsResult = Error | Ok
union EditNewsResult   = Error | NewsInfo




# 总搜索
@query search(content: String!, skip: Long, first: Long): SearchsResult!

union SearchsResult = Error | Searchs
type Searchs {
    searchs: [SearchsItem!]!
}
union SearchsItem = SchoolHeatInfo | EntertainmentInfo | PersonalInfo #| ... | ... | ... | ...



# 校园热点
@query allSchoolHeats(skip: Long, first: Long, sortedBy: SortedBy): AllSchoolHeatsResult!
@query schoolHeatInfo(id: ID!): SchoolHeatInfoResult!
@query schoolHeatsOfAuthor(authorId: ID!, skip: Long, first: Long): SchoolHeatsOfAuthorResult!
@query searchSchoolHeats(title: String!): SearchSchoolHeatsResult!
+@mutation createSchoolHeat(schoolHeatInput: SchoolHeatInput!): CreateSchoolHeatResult!
+@mutation deleteSchoolHeat(id: ID!): DeleteSchoolHeatResult!
+@mutation createSchoolHeatComment(schoolHeatCommentInput: SchoolHeatCommentInput!): CreateSchoolHeatCommentResult!
+@mutation deleteSchoolHeatComment(shId: ID!, cmmtId: ID!): DeleteSchoolHeatCommentResult!
+@mutation createSchoolHeatCommentReply(schoolHeatReplyInput: SchoolHeatReplyInput): CreateSchoolHeatCommentReplyResult!
+@mutation deleteSchoolHeatCommentReply(shId: ID!, cmmtId: ID!, rpyId: ID!): DeleteSchoolHeatCommentReplyResult!

type SchoolHeatInfo {
    id: ID!
    title: String!
    content: Content!
    author: PersonalInfo!
    latestCommenter: PersonalInfo
    latestActiveTime: Long!
    createTime: Long!
    heat: Long!
    allComments(skip: Long, first: Long): AllComments!
}
type MultiSchoolHeats {
    totalCount: Long!
    schoolHeats: [SchoolHeatInfo!]!
}
union SchoolHeatInfoResult = Error | SchoolHeatInfo
union CreateSchoolHeatResult = Error | SchoolHeatInfo
union DeleteSchoolHeatResult = Error | Ok
union AllSchoolHeatsResult = Error | MultiSchoolHeats
union SearchSchoolHeatsResult = Error | MultiSchoolHeats
union SchoolHeatsOfAuthorResult = Error | MultiSchoolHeats

input SchoolHeatInput {
    title: String!
    content: ContentInput!
}
input SchoolHeatCommentInput {
    postIdCommenting: ID!
    content: ContentInput!
}
input SchoolHeatReplyInput {
    commentIdReplying: ID!
    content: ContentInput!
    replyTo: ID
}



# 休闲娱乐
@query allEntertainments(skip: Long, first: Long, sortedBy: SortedBy): AllEntertainmentsResult!
@query entertainmentInfo(id: ID!): EntertainmentInfoResult!
@query entertainmentsOfAuthor(authorId: ID!, skip: Long, first: Long): EntertainmentsOfAuthorResult!
@query searchEntertainments(title: String!): SearchEntertainmentsResult!
+@mutation createEntertainment(entertainmentInput: EntertainmentInput!): CreateEntertainmentResult!
+@mutation deleteEntertainment(id: ID!): DeleteEntertainmentResult!
+@mutation createEntertainmentComment(entertainmentCommentInput: EntertainmentCommentInput!): CreateEntertainmentCommentResult!
+@mutation deleteEntertainmentComment(etmtId: ID!, cmmtId: ID!): DeleteEntertainmentCommentResult!
+@mutation createEntertainmentCommentReply(entertainmentReplyInput: EntertainmentReplyInput): CreateEntertainmentCommentReplyResult!
+@mutation deleteEntertainmentCommentReply(etmtId: ID!, cmmtId: ID!, rpyId: ID!): DeleteEntertainmentCommentReplyResult!

type EntertainmentInfo {
    id: ID!
    title: String!
    content: Content!
    author: PersonalInfo!
    latestCommenter: PersonalInfo
    latestActiveTime: Long!
    createTime: Long!
    heat: Long!
    allComments(skip: Long, first: Long): AllComments!
}
type MultiEntertainments {
    totalCount: Long!
    entertainments: [EntertainmentInfo!]!
}
union EntertainmentInfoResult = Error | EntertainmentInfo
union CreateEntertainmentResult = Error | EntertainmentInfo
union DeleteEntertainmentResult = Error | Ok
union AllEntertainmentsResult = Error | MultiEntertainments
union SearchEntertainmentsResult = Error | MultiEntertainments
union EntertainmentsOfAuthorResult = Error | MultiEntertainments

input EntertainmentInput {
    title: String!
    content: ContentInput!
}
input EntertainmentCommentInput {
    postIdCommenting: ID!
    content: ContentInput!
}
input EntertainmentReplyInput {
    postIdReplying: ID!
    commentIdReplying: ID!
    content: ContentInput!
    replyTo: ID
}



# 学习资料
@query allLearningResources(skip: Long, first: Long, course: String, sortedBy: SortedBy): AllLearningResourceResult!
@query allCourses: [String!]! # course还需要去找
@query learningResourceInfo(id: ID!): LearningResourceInfoResult!
@query learningResourcesOfAuthor(authorId: ID!, skip: Long, first: Long): LearningResourcesOfAuthorResult!
@query searchLearningResources(title: String!): SearchLearningResourcesResult!
+@mutation createLearningResource(learningResourceInput: LearningResourceInput): CreateLearningResourceResult!
+@mutation deleteLearningResource(id: ID!): DeleteLearningResourceResult!
+@mutation createLearningResourceComment(learningResourceCommentInput: LearningResourceCommentInput!): CreateLearningResourceCommentResult!
+@mutation deleteLearningResourceComment(lrId: ID!, cmmtId: ID!): DeleteLearningResourceCommentResult!
+@mutation createLearningResourceCommentReply(learningResourceReplyInput: LearningResourceReplyInput): CreateLearningResourceCommentReplyResult!
+@mutation deleteLearningResourceCommentReply(lrId: ID!, cmmtId: ID!, rpyId: ID!): DeleteLearningResourceCommentReplyResult!

type LearningResourceInfo {
    id: ID!
    author: PersonalInfo!
    title: String!
    content: Content!
    course: String!
    attachedFileURL: String
    latestCommenter: PersonalInfo
    latestActiveTime: Long!
    createTime: Long!
    allComments(skip: Long, first: Long): AllComments!
}
type MultiLearningResources {
    totalCount: Long!
    learningResources: [LearningResourceInfo!]!
}
union LearningResourceInfoResult = Error | LearningResourceInfo
union CreateLearningResourceResult = Error | LearningResourceInfo
union DeleteLearningResourceResult = Error | Ok
union AllLearningResourceResult = Error | MultiLearningResources
union LearningResourcesOfAuthorResult = Error | MultiLearningResources
union SearchLearningResourcesResult = Error | MultiLearningResources

input LearningResourceInput {
    title: String!
    content: ContentInput!
    course: String!
    base64AttachedFile: String
}
input LearningResourceCommentInput {
    postIdCommenting: ID!
    content: ContentInput!
}
input LearningResourceReplyInput {
    postIdReplying: ID!
    commentIdReplying: ID!
    content: ContentInput!
    replyTo: ID
}



# 复用评论和回复
type AllComments {
    totalCount: Long!
    comments: [CommentInfo!]!
}
type CommentInfo {
    id: ID!
    content: Content!
    author: PersonalInfo!
    allReplies(skip: Long, first: Long): AllReplies!
    creationTime: Long!
}
type AllReplies {
    totalCount: Long!
    replies: [ReplyInfo!]!
}
type ReplyInfo {
    id: ID!
    content: Content!
    author: PersonalInfo!
    replyTo: PersonalInfo
    creationTime: Long!
}

union CreateSchoolHeatCommentResult = Error | CommentInfo
union DeleteSchoolHeatCommentResult = Error | Ok
union CreateSchoolHeatCommentReplyResult = Error | ReplyInfo
union DeleteSchoolHeatCommentReplyResult = Error | Ok
union CreateEntertainmentCommentResult = Error | CommentInfo
union DeleteEntertainmentCommentResult = Error | Ok
union CreateEntertainmentCommentReplyResult = Error | ReplyInfo
union DeleteEntertainmentCommentReplyResult = Error | Ok
union CreateLearningResourceCommentResult = Error | CommentInfo
union DeleteLearningResourceCommentResult = Error | Ok
union CreateLearningResourceCommentReplyResult = Error | ReplyInfo
union DeleteLearningResourceCommentReplyResult = Error | Ok



# 失物招领
@query allFounds(skip: Long, first: Long): AllFoundsResult!
@query foundInfo(id: ID!): FoundInfoResult!
@query searchFounds(object: String!): SearchFoundsResult!
+@mutation createFound(foundInput: FoundInput!): CreateFoundResult!
+@mutation deleteFound(foundId: ID!): DeleteFoundResult!
+@mutation claimFound(foundId: ID!): ClaimFoundResult!
+@mutation cancelClaimFound(foundId: ID!): CancelClaimFoundResult!

type FoundInfo {
    id: ID!
    publisher: PersonalInfo!
    name: String!
    description: String!
    position: String
    pictureURL: String
    createTime: Long!
    contact: String
    foundTime: Long
    claimer: PersonalInfo
}

type MultiFoundInfos {
    totalCount: Long!
    founds: [FoundInfo!]!
}

union FoundInfoResult = Error | FoundInfo
union CreateFoundResult = Error | FoundInfo
union DeleteFoundResult = Error | Ok
union ClaimFoundResult = Error | Ok
union CancelClaimFoundResult = Error | Ok
union AllFoundsResult = Error | MultiFoundInfos
union SearchFoundsResult = Error | MultiFoundInfos

@query allLosts(skip: Long, first: Long): AllLostsResult!
@query lostInfo(id: ID!): LostInfoResult!
@query searchLosts(object: String!): SearchLostsResult!
+@mutation createLost(lostInput: LostInput!): CreateLostResult!
+@mutation deleteLost(id: ID!): DeleteLostResult!
+@mutation claimLost(lostId: ID!): ClaimLostResult!
+@mutation cancelClaimLost(foundId: ID!): CancelClaimLostResult!

type LostInfo {
    id: ID!
    publisher: PersonalInfo!
    name: String!
    description: String!
    position: String
    pictureURL: String
    createTime: Long!
    contact: String
    lostTime: Long
    claimer: PersonalInfo
}

type MultiLostInfos {
    totalCount: Long!
    losts: [LostInfo!]!
}

union LostInfoResult = Error | LostInfo
union CreateLostResult = Error | LostInfo
union DeleteLostResult = Error | Ok
union ClaimLostResult = Error | Ok
union CancelClaimLostResult = Error | Ok
union AllLostsResult = Error | MultiLostInfos
union SearchLostsResult = Error | MultiLostInfos

input FoundInput {
    itemName: String!
    description: String!
    position: String
    pictureBase64: String
    contact: String
    foundTime: Long
}

input LostInput {
    itemName: String!
    description: String!
    position: String
    pictureBase64: String
    contact: String
    lostTime: Long
}




# 讲座信息
@query allLectures(skip: Long, first: Long): AllLecturesResult! # 按讲座时间降序
@query lectureInfo(id: ID!): LectureInfoResult!
@query searchLectures(title: String!, skip: Long, first: Long): SearchLecturesResult!
+@mutation createLecture(lectureInput: LectureInput!): CreateLectureResult!
+@mutation editLecture(id: ID!, lectureInput: LectureOptionalInput!): EditLectureResult!
+@mutation deleteLecture(id: ID!): DeleteLectureResult!

type LectureInfo {
    id: ID!
    title: String!
    content: Content!
    position: String!
    time: Long!
    lecturer: String!
    note: String! # 备注
}
type MultiLectures {
    totalCount: Long!
    lectures: [LectureInfo!]!
}

union LectureInfoResult = Error | LectureInfo
union CreateLectureResult = Error | LectureInfo
union EditLectureResult = Error | LectureInfo
union DeleteLectureResult = Error | Ok
union AllLecturesResult = Error | MultiLectures
union SearchLecturesResult = Error | MultiLectures

input LectureInput {
    title: String!
    content: ContentInput!
    position: String!
    time: Long!
    lecturer: String!
    note: String! # 备注
}

input LectureOptionalInput {
    title: String
    content: ContentInput
    position: String
    time: Long
    lecturer: String
    note: String
}



# 个人信息
@query personInfo(id: ID!): PersonInfoResult!
@query allMajors: [String!]!
@query allSchools: [String!]!
@query majorsIn(school: String!): [String!]!
+@mutation editPersonInfo(personInfoInput: PersonInfoInput!): EditPersonInfoResult!

input PersonInfoInput {
    username: String
    gender: String
    grade: String
    school: String
    major: String
    introduction: String
    pictureBase64: String
}

type PersonalInfo {
    userId: String!
    pictureURL: String
    username: String!
    gender: String
    grade: String
    school: String
    major: String
    introduction: String
}

union PersonInfoResult = Error | PersonalInfo
union EditPersonInfoResult = Error | PersonalInfo



# 账号密码
+@mutation confirmPassword(comfirmInput: LoginInput!): ConfirmPasswordResult!
+@mutation changePassword(resetToken: String!, newPassword: String!): ChangePasswordResult!

type ResetPassToken {
    resetToken: String!
}

union ConfirmPasswordResult = Error | ResetPassToken
union ChangePasswordResult = Error | Ok



# 杂项
enum SortedBy {
    ActiveTimeAsc
    ActiveTimeDes
    HeatAsc
    HeatDes
    NatureAsc
    NatureDes
}

type Error {
    errCode: Int!
    msg: String
}

type Ok {
    ok: Boolean!
}

input ContentInput {
    elems: [ContentItemInput!]!
}

input ContentItemInput {
    type: ElemType!
    str: String!
}

enum ElemType {
    Picture
    Text
}

type Content {
    items: [ContentItem!]!
}

union ContentItem = Picture | Paragraph

type Picture {
    url: String!
}
type Paragraph {
    text: String!
}
